language: python

python:
  - "3.5.2"

git:
  depth: false

cache:
  timeout: 1000
  directories:
    - $HOME/miniconda
    - $HOME/downloads
    - $HOME/.mujoco
    - "$HOME/.cache/pre-commit"

before_cache:
 - rm -rf "${HOME}/miniconda/locks"
 - rm -rf "${HOME}/miniconda/pkgs"
 - rm -rf "${HOME}/miniconda/var"
 - rm -rf "${HOME}/miniconda/conda-meta/history"
 - rm -rf "${HOME}/.mujoco/mjkey.txt"

before_install:
  # system search paths
  - export PATH="${HOME}/miniconda/bin:${PATH}"
  - export LD_LIBRARY_PATH="${HOME}/.mujoco/mjpro150/bin:${LD_LIBRARY_PATH}"
  - export MJLIB_PATH="${HOME}/.mujoco/mjpro150/bin/libmujoco150.so"
  - export MJKEY_PATH="${HOME}/.mujoco/mjkey.txt"

  # get mujoco key
  - echo "$MJKEY" > "${HOME}/.mujoco/mjkey.txt"

  # update apt
  - sudo add-apt-repository --yes ppa:flixr/backports # for patchelf
  - sudo apt-get update

  # install MuJoCo if necessary
  - if [[ ! -d "${HOME}/.mujoco/mjpro150" ]]; then
      echo "Installing MuJoCo...";
      wget https://www.roboti.us/download/mjpro150_linux.zip -O "${HOME}/downloads/mjpro150_linux.zip";
      unzip "${HOME}/downloads/mjpro150_linux.zip" -d "${HOME}/.mujoco";
    else
      echo "MuJoCo already installed.";
    fi;

  # Install miniconda if necessary
  - if [[ -d "${HOME}/miniconda/bin" ]]; then
      echo "miniconda already installed.";
    else
      echo "Installing miniconda...";
      rm -rf "${HOME}/miniconda";
      if [[ -f "${HOME}/downloads/miniconda.sh" ]]; then
        rm -rf "${HOME}/downloads/miniconda.sh";
      fi;
      wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O "${HOME}/downloads/miniconda.sh";
      bash "${HOME}/downloads/miniconda.sh" -b -p "${HOME}/miniconda";
      conda update -q -y conda;
    fi;
  - conda config --set always_yes yes --set changeps1 no
  - conda info -a

install:
  # dummy X server
  - sudo apt-get install -y --allow-unauthenticated xpra xserver-xorg-video-dummy freeglut3-dev mesa-utils

  # mujoco deps
  - sudo apt-get install -y --allow-unauthenticated libglfw2 libglew-dev libosmesa6-dev patchelf libopenmpi-dev openmpi-bin

  # for dm_control (because 14.04 uses an ancient glibc)
  # see https://github.com/deepmind/dm_control/issues/2
  - sudo apt-get install -y --allow-unauthenticated libxml2 libxslt1.1

  # Create conda env if it does not exist; update it if environment.yml was touched
  - if [[ "${TRAVIS_PULL_REQUEST}" != "false" ]]; then
        env_changed="$(git diff "${TRAVIS_COMMIT_RANGE}" --stat environment.yml)";
    else
        env_changed="$(git diff origin/master --stat environment.yml)";
    fi;
  - if [[ ! -d "${HOME}/miniconda/envs/garage" ]]; then
      echo "Create conda environment...";
      conda env create -f environment.yml;
    else
      if [[ ! -z "${env_changed}" ]]; then
        echo "Updating conda environment...";
        conda env update;
      fi;
    fi;
  - source activate garage

  - cp $HOME/miniconda/envs/garage/lib/python3.5/site-packages/dm_control/mujoco/wrapper/util.py .
  # - export LD_PRELOAD=$(ldd $(which glxinfo) | grep libGL.so | awk '{print $3}')
  # - echo $LD_PRELOAD
  # - export LD_PRELOAD="${LD_PRELOAD}:libstdc++.so.6:libxslt.so.1:libexslt.so.0:libxml2.so.2"
  # - LD_PRELOAD=libstdc++.so.6:libxslt.so.1:libexslt.so.0:libxml2.so.2 python -c "import util; print(util.get_mjlib())"

  # - export LD_PRELOAD=$(ldd $(which glxinfo) | grep libGL.so)
  # - export LD_PRELOAD=${LD_PRELOAD}:libstdc++.so.6:libxslt.so.1:libexslt.so.0:libxml2.so.2 python -c "import util; print(util.get_mjlib())"

  # install tensorflow
  # it's not included in environment.yml because of CPU vs GPU
  - pip install tensorflow==1.8

  # trigger compilation of mujoco_py bindings
  - python -c "import mujoco_py"

before_script:
  # Add garage to PYTHONPATH
  - export PYTHONPATH="${TRAVIS_BUILD_DIR}"

  # Setup dummy display
  - export DISPLAY=:99
  - "xpra --xvfb=\"Xorg +extension GLX -config scripts/travisci/dummy.xorg.conf -logfile ${HOME}/.xpra/xorg.log\"  start \"${DISPLAY}\""

  # prevent garage from exiting on config
  - cp garage/config.py garage/config_personal.py

  # Silence annoying logs
  - export DISABLE_MUJOCO_RENDERING=1
  - export TF_CPP_MIN_LOG_LEVEL=3

script:
  - scripts/travisci/check_flake8.sh
  - scripts/travisci/check_imports.sh
  - scripts/travisci/check_precommit.sh
  - nose2 -c setup.cfg -E 'not huge'

after_script:
  - xpra stop "${DISPLAY}"
  - cat ~/.xpra/*

notifications:
  email: false
